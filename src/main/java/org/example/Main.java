package org.example;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class Main {

    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

    public static void main(String[] args) {
        firstTask();
        secondTask();
        thirdTask();
        forthTask();
        fifthTask();
        sixthTask();
        seventhTask();
        eighthTask();
    }

    //–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–∏—Å–µ–ª: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Ä–∞–≤–Ω—ã –ª–∏ –æ–Ω–∏ –∏–ª–∏ –æ–¥–Ω–æ –±–æ–ª—å—à–µ –¥—Ä—É–≥–æ–≥–æ.
    private static void firstTask() {
        System.out.println("–í–≤–µ–¥–∏ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –¥–≤–∞ —á–∏—Å–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.");
        System.out.println(compareTwoNumbers(inputNumRead(), inputNumRead()));
    }

    private static String compareTwoNumbers(int firstNum, int secondNum) {
        if (firstNum > secondNum) {
            return "–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ.";
        } else if (firstNum == secondNum) {
            return "–ß–∏—Å–ª–∞ —Ä–∞–≤–Ω—ã.";
        } else {
            return "–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ.";
        }
    }

    //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Ç–Ω–æ—Å—Ç—å: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —á–µ—Ç–Ω—ã–º –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω—ã–º.
    private static void secondTask() {
        System.out.println("–í–≤–µ–¥–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–≥–æ —á–µ—Ç–Ω–æ—Å—Ç–∏");
        System.out.println(isEvenNumber(inputNumRead()));
    }

    private static String isEvenNumber(int inputNum) {
        return inputNum % 2 == 0 ? "–ß–∏—Å–ª–æ —á–µ—Ç–Ω–æ–µ." : "–ß–∏—Å–ª–æ –Ω–µ —á–µ—Ç–Ω–æ–µ.";
    }

    //–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ, –¥–µ–ª–µ–Ω–∏–µ)
    // –Ω–∞–¥ –¥–≤—É–º—è —á–∏—Å–ª–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    private static void thirdTask() {
        String operand;

        List<String> validOperandList = new ArrayList<>(List.of("+", "-", "*", "/"));
        System.out.println("–í–≤–µ–¥–∏ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ –∏ –∑–Ω–∞–∫ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (+,-,*,/) –¥–ª—è –µ—ë –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è.");
        int fistNum = inputNumRead();
        int secondNum = inputNumRead();
        try {
            while (true) {
                operand = reader.readLine();
                if (!validOperandList.contains(operand)) {
                    System.out.println("–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –æ–ø–µ—Ä–∞–Ω–¥–∞. –í–≤–µ–¥–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–∏–º–≤–æ–ª –∏–∑ —Å–ø–∏—Å–∫–∞: +,-,*,/");
                } else {
                    break;
                }
            }
        } catch (Exception e) {
            throw new RuntimeException("–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª (–Ω–µ —á–∏—Å–ª–æ)", e);
        }
        System.out.println(calculateTwoNumbers(fistNum, secondNum, operand));
    }

    private static String calculateTwoNumbers(int firstNum, int secondNum, String operand) {
        int result = switch (operand) {
            case "+" -> firstNum + secondNum;
            case "-" -> firstNum - secondNum;
            case "*" -> firstNum * secondNum;
            default -> firstNum / secondNum;
        };
        return String.valueOf(result);
    }

    //–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏—Å–æ–∫–æ—Å–Ω–æ–≥–æ –≥–æ–¥–∞: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–Ω—ã–π –≥–æ–¥ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–º.
    private static void forthTask() {
        System.out.println("–í–≤–µ–¥–∏ –≥–æ–¥, –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π –ª–∏ –æ–Ω.");
        System.out.println(isLeapYear(inputNumRead()));
    }

    private static String isLeapYear(int year) {
        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
            return "–ì–æ–¥ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π.";
        }
        return "–ì–æ–¥ –Ω–µ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π.";
    }

    //–†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã—á–∏—Å–ª–∏—Ç—å –µ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª.
    private static void fifthTask() {
        System.out.println("–í–≤–µ–¥–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞");
        System.out.println(factorial());
    }

    private static Long factorial() {
        int inputNum = inputNumRead();
        try {
            long factorial = 1L;
            for (long i = 1L; i <= inputNum; i++) {
                factorial = Math.multiplyExact(factorial, i);
            }
            return factorial;
        } catch (ArithmeticException e) {
            System.out.println("–ü—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ");
            return factorial();
        }
    }

    //–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (—á–∞—Å—ã), –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä –∏–ª–∏ –Ω–æ—á—å.
    private static void sixthTask() {
        System.out.println("–í–≤–µ–¥–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (—á–∞—Å—ã) –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24—á, –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫");
        System.out.println(dayPeriod(inputNumRead()));
    }

    private static String dayPeriod(int hour) {
        if (hour > 24) return "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.";
        if (4 < hour && hour < 12) {
            return "—É—Ç—Ä–æ";
        } else if (12 <= hour && hour < 17) {
            return "–¥–µ–Ω—å";
        } else if (17 <= hour && hour <= 23) {
            return "–≤–µ—á–µ—Ä";
        } else {
            return "–Ω–æ—á—å";
        }
    }

    //–ü–µ—Ä–µ–≤–æ–¥ —á–∏—Å–ª–∞ –≤ —Ä–∏–º—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Ä–∏–º—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è.
    private static void seventhTask() {
        System.out.println("–í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —á–∏—Å–ª–æ –≤ —Ä–∏–ºc–∫–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è");
        System.out.println(toRomanNum(inputNumRead()));
    }

    private static String toRomanNum(int inputNum) {
        String romanNum = "";

        if (inputNum > 1000) {
            for (int i = 0; i < inputNum / 1000; i++) {
                romanNum = romanNum.concat("M");
            }
        }
        if (inputNum > 100) {
            romanNum = romanNum.concat(bitUnitToRoman((inputNum / 100) % 10, new String[]{"C", "D", "M"}));
        }
        if (inputNum > 10) {
            romanNum = romanNum.concat(bitUnitToRoman((inputNum / 10) % 10, new String[]{"X", "L", "C"}));
        }
        romanNum = romanNum.concat(bitUnitToRoman((inputNum % 10), new String[]{"I", "V", "X"}));
        return romanNum;
    }

    private static String bitUnitToRoman(int bitUnit, String[] romanIntArr) {
        if (bitUnit > 9) throw new RuntimeException("–í –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ø–∞–ª–∞ –Ω–µ —Ü–∏—Ñ—Ä–∞ —Ä–∞–∑—Ä—è–¥–∞");
        else if (bitUnit == 4) {
            return romanIntArr[0].concat(romanIntArr[1]);
        } else if (bitUnit == 9) {
            return romanIntArr[0].concat(romanIntArr[romanIntArr.length - 1]);
        } else {
            String romanNum;
            int startIndex;
            if (bitUnit < 4) {
                romanNum = romanIntArr[0];
                startIndex = 1;
            } else {
                romanNum = romanIntArr[1];
                startIndex = 5;
            }
            while (startIndex < bitUnit) {
                romanNum = romanNum.concat(romanIntArr[0]);
                startIndex++;
            }
            return romanNum;
        }
    }

    //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º.
    //–†–µ–∑—É–ª—å—Ç–∞—Ç "–ß–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º".
    //–ü—Ä–æ—Å—Ç–æÃÅ–µ —á–∏—Å–ª–æÃÅ ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∏–º–µ—é—â–µ–µ —Ä–æ–≤–Ω–æ –¥–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –¥–µ–ª–∏—Ç–µ–ª—è. –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ
    //—á–∏—Å–ª–æ ùëù —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ª–∏—á–Ω–æ –æ—Ç 1 –∏ –¥–µ–ª–∏—Ç—Å—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –∏ –Ω–∞ —Å–∞–º–æ ùëù
    //–ü—Ä–∏–º–µ—Ä: —á–∏—Å–ª–æ 2 –ø—Ä–æ—Å—Ç–æ–µ (–¥–µ–ª–∏—Ç—Å—è –Ω–∞ 1 –∏ –Ω–∞ 2), –∞ 4 –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º, —Ç–∞–∫ –∫–∞–∫, –ø–æ–º–∏–º–æ 1 –∏ 4,
    // –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 2 ‚Äî –∏–º–µ–µ—Ç —Ç—Ä–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –¥–µ–ª–∏—Ç–µ–ª—è.
    private static void eighthTask() {
        System.out.println("–í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–µ –æ–Ω–æ –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–Ω–æ–µ");
        System.out.println(isSimpleNum(inputNumRead()));
    }

    private static String isSimpleNum(long inputNum) {
        int naturalNum = 2;

        if (inputNum >= 0) {
            if (inputNum <= 1) return "–ß–∏—Å–ª–∞ 0 –∏ 1 –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –ø—Ä–æ—Å—Ç—ã–º –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–Ω—ã–º";
            else {
                while (naturalNum < inputNum) {
                    if (inputNum % naturalNum == 0) return "–ß–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å—Ç–∞–≤–Ω—ã–º";
                    naturalNum++;
                }
                return "–ß–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º";
            }
        } else if (inputNum == -1) return "–ß–∏—Å–ª–∞ 0 –∏ -1 –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –ø—Ä–æ—Å—Ç—ã–º –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–Ω—ã–º";
        else {
            while (naturalNum > inputNum) {
                if (inputNum % naturalNum == 0) return "–ß–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å—Ç–∞–≤–Ω—ã–º";
                naturalNum--;
            }
            return "–ß–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º";
        }
    }

    // —É—Ç–∏–ª–∏—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Å–æ–ª–∏
    private static int inputNumRead() throws RuntimeException {
        try {
            return Integer.parseInt(reader.readLine());
        } catch (Exception e) {
            throw new RuntimeException("–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª (–Ω–µ —á–∏—Å–ª–æ)", e);
        }
    }
}
